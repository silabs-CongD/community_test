name: sonar-scan
on:
  pull_request_target:
    types: [opened, synchronize, edited]

  workflow_dispatch:

permissions:
  contents: write
  statuses: write
  pages: write
  checks: write
  id-token: write

env:
  GH_PAGE_ROOT_URL: https://fictional-adventure-8jpnnk4.pages.github.io

  ARCH: x86_64
  POST_BUILD_EXE: "/opt/commander-cli/commander-cli"
  ARM_GCC_DIR: "/opt/gcc-arm-none-eabi/"
  ARM_GCC_URL: "https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz"
  SONAR_PROJECT: community_test
  SONAR_SCANNER_URL: "https://github.com/SiliconLabs/application_examples_ci/releases/download/v1.0/sonar-scanner-cli-6.2.1.4610-linux-x64.zip"

jobs:
  FW_build:
    runs-on: silabs-internal
    steps:
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4
      
      - name: Checkout fork repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.user.login }}/${{ github.event.repository.name }}
          ref: ${{ github.event.pull_request.head.ref }}
    
      - name: Poll the change
        run: |
          git remote add upstream https://github.com/silabs-CongD/test_build.git
          git fetch upstream
          git diff --name-only upstream/master HEAD > git_log.txt
          grep -v "README.md\\|.github\\|LICENSE\\|templates.xml\\|tools" git_log.txt > git_diff.txt

          xargs -I{} -a git_diff.txt find {} -type f -name "*.[ch]" > source_list.txt
          xargs -I{} -a git_diff.txt find {} -type f -name "*.slcp" > solution_list.txt

          if ! [ -s source_list.txt -o -s solution_list.txt ]; then
            printf 'Skip check. No changed project found.' >> git_diff.txt
          fi

          slcp_path=$(cat solution_list.txt)
          base_dir="${slcp_path%/*}"
          echo "PROJECT_BASE_DIR=$base_dir" >> $GITHUB_ENV

          # For debug
          cat git_diff.txt
        
      - name: Install Dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install --no-install-recommends -y \
          clang \
          clang-tidy \
          cppcheck \
          git \
          build-essential \
          curl \
          jq \
          python3-dev \
          python3-pip \
          ninja-build \
          make \
          wget \
          zip \
          unzip \
          libgl1 \
          libglib2.0-0 \
          libpcre2-dev

      - name: CMake 3.25.4
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-linux-${{ env.ARCH }}.sh \
          -q -O /tmp/cmake-install.sh \
          && chmod u+x /tmp/cmake-install.sh \
          && mkdir /opt/cmake-3.25.3 \
          && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.25.3 \
          && rm /tmp/cmake-install.sh \
          && ln -sf /opt/cmake-3.25.3/bin/* /usr/local/bin
      
      - name: Install GNU Arm Embedded Toolchain
        run: |
          cd /tmp/ \
          && wget ${{ env.ARM_GCC_URL }} \
          && tar -xf arm-gnu-toolchain-12.2.rel1-${{ env.ARCH }}-arm-none-eabi.tar.xz \
          && mv arm-gnu-toolchain-12.2.rel1-${{ env.ARCH }}-arm-none-eabi /opt/gcc-arm-none-eabi \
          && rm arm-gnu-toolchain-12.2.rel-${{ env.ARCH }}-arm-none-eabi -rf
      
      - name: Simplicity Commander
        run: |
          wget https://www.silabs.com/documents/login/software/SimplicityCommander-Linux.zip \
          && unzip SimplicityCommander-Linux.zip \
          &&  tar -xf SimplicityCommander-Linux/Commander-cli_linux_${{ env.ARCH }}_*.tar.bz \
          && mv commander-cli /opt/commander-cli \
          && rm -rf SimplicityCommander-Linux.zip SimplicityCommander-Linux
      
      ###########################################################
      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run build-wrapper
        run: |
          python3 pre_build/pre_build.py

          curl -L -o sonar_scanner.zip $SONAR_SCANNER_URL
          unzip sonar_scanner.zip -d tools
          chmod 777 tools/sonar-scanner-6.2.1.4610-linux-x64/jre/bin/java

          $SL_SLC_PATH configuration -gcc $ARM_GCC_DIR
          export SCRIPT_PATH=${{ github.workspace }}/pr_check/scripts/checkproject.py
          
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make all

      - name: Sonar scan
        run: |
          repo_owner=$(git config --get remote.origin.url | awk -F'[:/]' '{print $(NF-1)}')
          export SONAR_BRANCH=$repo_owner

          # Scan list .c and .h files
          find $PROJECT_BASE_DIR -name *.c -o -name *.h > source_list.txt

          # Combine into a variable
          rm -rf source_list2.txt
          while read line; do echo **/$(basename $line) >> source_list2.txt; done < source_list.txt

          combile=''
          while read line
          do 
            combile+=$line,
          done < source_list2.txt

          # Remove last comma (,)
          result="${combile%?}"
          echo $result

          export SONAR_SCANNER_PATH=${{ github.workspace }}/tools/sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner
          chmod +x $SONAR_SCANNER_PATH
          $SONAR_SCANNER_PATH -D"sonar.verbose=true" -D"sonar.qualitygate.wait=True" \
          -D"sonar.branch.name=${{ github.ref_name }}" -D"sonar.scm.disabled=True" \
          -D"sonar.projectName=$SONAR_PROJECT" -D"sonar.projectKey=$SONAR_PROJECT" -D"sonar.projectBaseDir=$PROJECT_BASE_DIR" \
          -D"sonar.sources=." -D"sonar.inclusions=$result" -D"sonar.host.url=${{ secrets.SONAR_HOST_URL }}" \
          -D"sonar.token=${{ secrets.SONAR_TOKEN }}" -D"sonar.cfamily.threads=4" -D"sonar.language=c" \
          -D"sonar.exclusions=**/autogen/**,**gecko_sdk_**,**simplicity_sdk**,**/config/**,**/*.html, .metadata, .scannerwork, .metadata/**" > sonar_log.txt

          if grep -qe "EXECUTION SUCCESS" sonar_log.txt; then
            echo "result_sonar=success" >> $GITHUB_ENV
          else
            echo "result_sonar=failure" >> $GITHUB_ENV
          fi
        continue-on-error: true


      - name: Generate report
        run: |
          if [ $result_sonar == failure ]; then
            pip3 install requests
            python3 scripts/gen_sonar_api_report.py $SONAR_PROJECT $SONAR_BRANCH ${{ secrets.SONAR_TOKEN }}
          else
            echo "SonarQube passed!"
          fi

      ###########################################################
      - name: Checkout GH_Page branch
        uses: actions/checkout@v4
        with:
          ref: gh_pages
          path: gh_pages

      - name: Copy report in to gh_page branch
        run: |
          # Got unique number - pull request id
          echo ${{ github.event.pull_request.head.number }}
          echo ${{ github.event.pull_request.head.sha }}

          echo "REPORT_FOLDER=${{ github.event.pull_request.head.number }}" >> $GITHUB_ENV

          cd gh_pages
          if [ ! -d $REPORT_FOLDER ]; then
            mkdir $REPORT_FOLDER
          fi
          cp ${{ github.workspace }}/sonar_api_report.html $REPORT_FOLDER


          if [ -n "$(git status --porcelain)" ]; then
          {
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"          
            git add .
            git commit -m "Update GitHub Pages from ${{ github.ref_name }}"
            git push origin HEAD:gh_pages

            sleep 30
          }
          else
            echo "No changes";
          fi

      - name: Commit check status
        run: |
          report_url=$GH_PAGE_ROOT_URL/$REPORT_FOLDER/sonar_api_report.html

          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $CODO_SANDBOX_PSW" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/SiliconLabsSoftware/community_test/statuses/${{ github.event.pull_request.head.sha }} \
          -d '{"state":"failure","target_url":"${report_url}","description":"Check-SonarQube","context":"Check-SonarQube'          
